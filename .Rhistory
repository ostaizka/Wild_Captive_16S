summary_REH_sub <- rbind(summary_REH_sub,c(n_wild,mean_wild,sd_wild,n_captive,mean_captive,sd_captive))
}
colnames(summary_REH_sub) <- c("n_wild", "mean_wild", "sd_wild","n_captive", "mean_captive", "sd_captive")
rownames(summary_REH_sub) <- sublist
summary_REH_sub <- as.data.frame(summary_REH_sub)
meta_REH_sub_ready <- tibble::rownames_to_column(summary_REH_sub,"Author")
rownames(meta_REH_sub_ready) <- meta_REH_sub_ready$Author
sp_sorted <- c("RHBR","PYNE","PAAN","PATR","GOGO")
meta_REH_sub_ready <- meta_REH_sub_ready[sp_sorted,]
meta_REH_sub_tree.raw <- metacont(n_captive,mean_captive,sd_captive,n_wild,mean_wild,sd_wild,
data = meta_REH_sub_ready,
studlab = paste(Author),
comb.fixed = FALSE,
comb.random = TRUE,
method.tau = "SJ",
hakn = TRUE,
prediction = TRUE,
sm = "SMD")
meta_REH_sub_tree.raw
sublist <- c("TUTR","MOCH","BOGA","ELDA","CENI")
summary_R.subset <- c()
for (code in sublist){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
divR <- div_test(final.table,qvalue=0,hierarchy=hierarchy[,c(1,5)])
divR_table <- divR$data
divR_wild <- divR_table[divR_table$Group == "Wild",]
n_wild <- nrow(divR_wild)
mean_wild <- mean(divR_wild[,c("Value")])
sd_wild <- sd(divR_wild[,c("Value")])
divR_captive <- divR_table[divR_table$Group == "Captivity",]
n_captive <- nrow(divR_captive)
mean_captive <- mean(divR_captive[,c("Value")])
sd_captive <- sd(divR_captive[,c("Value")])
summary_R.subset <- rbind(summary_R.subset,c(n_wild,mean_wild,sd_wild,n_captive,mean_captive,sd_captive))
}
colnames(summary_R.subset) <- c("n_wild", "mean_wild", "sd_wild","n_captive", "mean_captive", "sd_captive")
rownames(summary_R.subset) <- sublist
summary_R.subset <- as.data.frame(summary_R.subset)
meta_R_sub_ready <- tibble::rownames_to_column(summary_R.subset,"Author")
rownames(meta_R_sub_ready) <- meta_R_sub_ready$Author
sp_sorted <- c("TUTR","MOCH","BOGA","ELDA","CENI")
meta_R_sub_ready <- meta_R_sub_ready[sp_sorted,]
meta_R_sub.raw <- metacont(n_captive,mean_captive,sd_captive,n_wild,mean_wild,sd_wild,
data = meta_R_sub_ready,
studlab = paste(Author),
comb.fixed = FALSE,
comb.random = TRUE,
method.tau = "SJ",
hakn = TRUE,
prediction = TRUE,
sm = "SMD")
meta_R_sub.raw
summary_REH_sub <- c()
for (code in sublist){
print(code)
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
divq1 <- div_test(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
divq1_table <- divq1$data
divq1_wild <- divq1_table[divq1_table$Group == "Wild",]
n_wild <- nrow(divq1_wild)
mean_wild <- mean(divq1_wild[,c("Value")])
sd_wild <- sd(divq1_wild[,c("Value")])
divq1_captive <- divq1_table[divq1_table$Group == "Captivity",]
n_captive <- nrow(divq1_captive)
mean_captive <- mean(divq1_captive[,c("Value")])
sd_captive <- sd(divq1_captive[,c("Value")])
summary_REH_sub <- rbind(summary_REH_sub,c(n_wild,mean_wild,sd_wild,n_captive,mean_captive,sd_captive))
}
colnames(summary_REH_sub) <- c("n_wild", "mean_wild", "sd_wild","n_captive", "mean_captive", "sd_captive")
rownames(summary_REH_sub) <- sublist
summary_REH_sub <- as.data.frame(summary_REH_sub)
meta_REH_sub_ready <- tibble::rownames_to_column(summary_REH_sub,"Author")
rownames(meta_REH_sub_ready) <- meta_REH_sub_ready$Author
sp_sorted <- c("TUTR","MOCH","BOGA","ELDA","CENI")
meta_REH_sub_ready <- meta_REH_sub_ready[sp_sorted,]
meta_q1_sub_tree.raw <- metacont(n_captive,mean_captive,sd_captive,n_wild,mean_wild,sd_wild,
data = meta_REH_sub_ready,
studlab = paste(Author),
comb.fixed = FALSE,
comb.random = TRUE,
method.tau = "SJ",
hakn = TRUE,
prediction = TRUE,
sm = "SMD")
meta_q1_sub_tree.raw
permanovaR_results <- c()
permutestR_results <- c()
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
##Filter the hierarchy
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
#Check whether both lists are identical
identical(sort(colnames(final.table)),sort(as.character(hierarchy[,1])))
##Filter the metadata
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.R <- pair_dis(final.table,qvalue=0,hierarchy=hierarchy[,c(1,5)])
u0n <- pairdis.R$L1_UqN
u0n.dist <- as.dist(u0n)
ps.disper.u0n.origin <- betadisper(u0n.dist, metadata.filtered1$Origin)
permutestR <- permutest(ps.disper.u0n.origin, pairwise = TRUE)
permutestR_results <- append(permutestR_results,permutestq0[1])
permanovaR <- adonis(u0n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
print(code)
permanovaR_results <- append(permanovaR_results,permanovaq0[1])
}
names(permanovaR_results) <- code.list
names(permutestR_results) <- code.list
permanovaR_results <- c()
permutestR_results <- c()
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
##Filter the hierarchy
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
#Check whether both lists are identical
identical(sort(colnames(final.table)),sort(as.character(hierarchy[,1])))
##Filter the metadata
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.R <- pair_dis(final.table,qvalue=0,hierarchy=hierarchy[,c(1,5)])
u0n <- pairdis.R$L1_UqN
u0n.dist <- as.dist(u0n)
ps.disper.u0n.origin <- betadisper(u0n.dist, metadata.filtered1$Origin)
permutestR <- permutest(ps.disper.u0n.origin, pairwise = TRUE)
permutestR_results <- append(permutestR_results,permutestR[1])
permanovaR <- adonis(u0n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
print(code)
permanovaR_results <- append(permanovaR_results,permanovaR[1])
}
names(permanovaR_results) <- code.list
names(permutestR_results) <- code.list
permanovaR_results
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.REH <- pair_dis(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
u1n <- pairdis.q1$L1_UqN
u1n.dist <- as.dist(u1n)
ps.disper.u1n.origin <- betadisper(u1n.dist, metadata.filtered1$Origin)
permutestREH <- permutest(ps.disper.u1n.origin, pairwise = TRUE)
permutestREH_results <- append(permutestREH_results,permutestREH[1])
permanovaREH <- adonis(u1n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
permanovaREH_results <- append(permanovaREH_results,permanovaREH[1])
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.REH <- pair_dis(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
u1n <- pairdis.REH$L1_UqN
u1n.dist <- as.dist(u1n)
ps.disper.u1n.origin <- betadisper(u1n.dist, metadata.filtered1$Origin)
permutestREH <- permutest(ps.disper.u1n.origin, pairwise = TRUE)
permutestREH_results <- append(permutestREH_results,permutestREH[1])
permanovaREH <- adonis(u1n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
permanovaREH_results <- append(permanovaREH_results,permanovaREH[1])
permanovaREH_results <- c()
permutestREH_results <- c()
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.REH <- pair_dis(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
u1n <- pairdis.REH$L1_UqN
u1n.dist <- as.dist(u1n)
ps.disper.u1n.origin <- betadisper(u1n.dist, metadata.filtered1$Origin)
permutestREH <- permutest(ps.disper.u1n.origin, pairwise = TRUE)
permutestREH_results <- append(permutestREH_results,permutestREH[1])
permanovaREH <- adonis(u1n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
permanovaREH_results <- append(permanovaREH_results,permanovaREH[1])
permanovaREH_results
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
#all.columns <- colnames(wild.capt)
#taxa.all <- all.columns[-length(all.columns)]
wild <- wild.capt[wild.capt$Origin == "Wild",]
wild <- wild[,-ncol(wild)]
wild <- wild[,colSums(wild) > 0]
wild.taxa <- colnames(wild)
shapiro_wild <- c()
for (y in wild.taxa){
res.shapiro.wild <- shapiro.test(wild[,y])
shapiro_wild <- rbind(shapiro_wild,c(res.shapiro.wild[[1]],Pvalue=res.shapiro.wild[[2]]))
}
rownames(shapiro_wild) <- wild.taxa
assign(paste("shapiro_wild_",code,sep=""),get("shapiro_wild"))
write.table(get(paste("shapiro_wild_",code,sep="")),paste("Results/shapiro_wild_",code,".tsv",sep=""))
}
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
#all.columns <- colnames(wild.capt)
#taxa.all <- all.columns[-length(all.columns)]
wild <- wild.capt[wild.capt$Origin == "Wild",]
wild <- wild[,-ncol(wild)]
wild <- wild[,colSums(wild) > 0]
wild.taxa <- colnames(wild)
shapiro_wild <- c()
for (y in wild.taxa){
res.shapiro.wild <- shapiro.test(wild[,y])
shapiro_wild <- rbind(shapiro_wild,c(res.shapiro.wild[[1]],Pvalue=res.shapiro.wild[[2]]))
}
rownames(shapiro_wild) <- wild.taxa
assign(paste("shapiro_wild_",code,sep=""),get("shapiro_wild"))
write.table(get(paste("shapiro_wild_",code,sep="")),paste("Results/Shapiro/shapiro_wild_",code,".tsv",sep=""))
}
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
wild.capt.no <- wild.capt[,-ncol(wild.capt)]
all.taxa <- colnames(wild.capt.no)
Wilcox_result <- c()
for (y in all.taxa){
res.wilcox <- wilcox.test(wild.capt[,y] ~ Origin, data = wild.capt,
exact = FALSE, alternative = "less")
Wilcox_result <- rbind(Wilcox_result,c(res.wilcox[[1]],Pvalue=res.wilcox[[3]]))
}
rownames(Wilcox_result) <- all.taxa
Wilcox_result <- as.data.frame(Wilcox_result)
Wilcox_result <- subset(Wilcox_result, Pvalue <= 0.01)
assign(paste("Wilcox_result_",code,sep=""),get("Wilcox_result"))
write.table(get(paste("Wilcox_result_",code,sep="")),paste("Results/WilcoxonTest/Wilcox_result_",code,".tsv",sep=""))
}
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
wild <- wild.capt[wild.capt$Origin == "Wild",]
wild <- wild[,-ncol(wild)]
mean_wild <- sapply(wild,FUN=mean)
mean_wild <- as.data.frame(mean_wild)
sd_wild <- sapply(wild,FUN=sd)
sd_wild <- as.data.frame(sd_wild)
summary_wild <- merge(mean_wild,sd_wild, by = "row.names")
captive <- wild.capt[wild.capt$Origin == "Captivity",]
captive <- captive[,-ncol(captive)]
mean_captive <- sapply(captive,FUN=mean)
mean_captive <- as.data.frame(mean_captive)
sd_captive <- sapply(captive,FUN=sd)
sd_captive <- as.data.frame(sd_captive)
summary_captive <- merge(mean_captive,sd_captive, by = "row.names")
summary.rel <- merge(summary_wild,summary_captive, by = "Row.names")
assign(paste("summary_rel_",code,sep=""),get("summary.rel"))
write.table(get(paste("summary_rel_",code,sep="")),paste("Results/summary_rel_",code,".tsv",sep=""))
}
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
wild <- wild.capt[wild.capt$Origin == "Wild",]
wild <- wild[,-ncol(wild)]
mean_wild <- sapply(wild,FUN=mean)
mean_wild <- as.data.frame(mean_wild)
sd_wild <- sapply(wild,FUN=sd)
sd_wild <- as.data.frame(sd_wild)
summary_wild <- merge(mean_wild,sd_wild, by = "row.names")
captive <- wild.capt[wild.capt$Origin == "Captivity",]
captive <- captive[,-ncol(captive)]
mean_captive <- sapply(captive,FUN=mean)
mean_captive <- as.data.frame(mean_captive)
sd_captive <- sapply(captive,FUN=sd)
sd_captive <- as.data.frame(sd_captive)
summary_captive <- merge(mean_captive,sd_captive, by = "row.names")
summary.rel <- merge(summary_wild,summary_captive, by = "Row.names")
assign(paste("summary_rel_",code,sep=""),get("summary.rel"))
write.table(get(paste("summary_rel_",code,sep="")),paste("Results/Relative_means/summary_rel_",code,".tsv",sep=""))
}
shared.taxa <- c()
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
hierarchy_species <- hierarchy[,c(1,5)]
filtered.pecent <- tss(final.table)*100
filtered.pecent.t <- as.data.frame(t(as.matrix(filtered.pecent)))
table.W <- tibble::rownames_to_column(filtered.pecent.t, "Samples")
wild.capt <- merge(table.W,hierarchy_species,by="Samples")
wild.capt <- wild.capt[,-c(1)]
#all.columns <- colnames(wild.capt)
#taxa.all <- all.columns[-length(all.columns)]
wild <- wild.capt[wild.capt$Origin == "Wild",]
wild <- wild[,-ncol(wild)]
wild <- wild[,colSums(wild) > 0]
wild.taxa <- colnames(wild)
captive <- wild.capt[wild.capt$Origin == "Captivity",]
captive <- captive[,-ncol(captive)]
captive <- captive[,colSums(captive) > 0]
captive.taxa <- colnames(captive)
both.taxa <- intersect(wild.taxa,captive.taxa)
wildonly.taxa <- wild.taxa[!wild.taxa %in% captive.taxa]
captiveonly.taxa <- captive.taxa[! captive.taxa %in% wild.taxa]
length(wildonly.taxa)
length(both.taxa)
length(captiveonly.taxa)
shared <- cbind(length(wildonly.taxa),length(both.taxa),length(captiveonly.taxa))
shared.taxa <- rbind(shared.taxa,shared)
}
colnames(shared.taxa) <- c("wild_only", "both", "captive_only")
rownames(shared.taxa) <- code.list
write.table(shared.taxa,"Results/shared_genus.tsv")
summary_R_all <- c()
summary_REH_all <- c()
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
divqR <- div_test(final.table,qvalue=0,hierarchy=hierarchy[,c(1,5)])
divqR_table <- divqR$data
n_all <- nrow(divqR_table)
mean_all <- mean(divqR_table[,c("Value")])
sd_all <- sd(divqR_table[,c("Value")])
summary_R_all <- rbind(summary_R_all,c(n_all,mean_all,sd_all))
}
colnames(summary_R_all) <- c("n_R", "mean_R", "sd_R")
rownames(summary_R_all) <- code.list
for (code in code.list){
final.table <- read.table(paste("Tables/countfiltered_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
divREH <- div_test(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
divREH_table <- divREH$data
n_all <- nrow(divREH_table)
mean_all <- mean(divREH_table[,c("Value")])
sd_all <- sd(divREH_table[,c("Value")])
summary_REH_all <- rbind(summary_REH_all,c(n_all,mean_all,sd_all))
}
colnames(summary_REH_all) <- c("n_REH", "mean_REH", "sd_REH")
rownames(summary_REH_all) <- code.list
summary_all <- merge(summary_R_all,summary_REH_all, by= "row.names")
summary_all <- tibble::column_to_rownames(summary_all, "Row.names")
summary_all
#### Species level analysis ####
#Merging all tables in one
#Load files at genus level
files.g = list.files(path="Tables",pattern="countfiltered_*")
#names.g = gsub("countfiltered_","",files.g)
#names.g = gsub(".tsv","",names.g)
filelist.g = lapply(paste("Tables",files.g,sep="/"), function(x)read.table(x, header=T))
rownameslist = lapply(filelist.g, function(x) rownames(x))
for (l in c(1:length(filelist.g))){
filelist.g[[l]]$taxa <- rownames(filelist.g[[l]])
}
#Note some erroneous files can prevent all files from loading (remove erroneous ones)
#Transform list to matrix
filelist.g %>% purrr::reduce(full_join, by = "taxa") -> count.table.all.g
rownames(count.table.all.g) <- count.table.all.g[,"taxa"]
count.table.all.g <- count.table.all.g[,colnames(count.table.all.g) != "taxa"]
#Name columns
#colnames(count.table.all.g) <- names.g
#Replace NAs by 0s
count.table.all.g[is.na(count.table.all.g)] <- 0
View(count.table.all.g)
count.table.all.g <- read.table("Tables/count_Genus_all.tsv")
rownames(count.table.all.g) <- gsub(" ","_",rownames(count.table.all.g))
rownames(count.table.all.g) <- gsub("[","",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub("]","",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub("(","-",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub(")","-",rownames(count.table.all.g),fixed = TRUE)
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(count.table.all.g)),]
write.table(count.table.all.g, "Tables/count_Genus_all.tsv")
count.table.all.g <- read.table("Tables/count_Genus_all.tsv")
rownames(count.table.all.g) <- gsub(" ","_",rownames(count.table.all.g))
rownames(count.table.all.g) <- gsub("[","",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub("]","",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub("(","-",rownames(count.table.all.g),fixed = TRUE)
rownames(count.table.all.g) <- gsub(")","-",rownames(count.table.all.g),fixed = TRUE)
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(count.table.all.g)),]
code
final.table <- read.table(paste("~/reanalysis/table/countfiltered_",taxa,"_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.q1 <- pair_dis(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
u1n <- pairdis.q1$L1_UqN
u1n.dist <- as.dist(u1n)
ps.disper.u1n.origin <- betadisper(u1n.dist, metadata.filtered1$Origin)
permutestq1tree <- permutest(ps.disper.u1n.origin, pairwise = TRUE)
permutesq1_tree_results <- append(permutesq1_tree_results,permutestq1tree[1])
permanovaq1tree <- adonis(u1n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
permanovaq1_tree_results <- append(permanovaq1_tree_results,permanovaq1tree[1])
capwild.tree <- read.tree("~/reanalysis/genustree.tre")
permanovaq1_tree_results <- c()
permutesq1_tree_results <- c()
final.table <- read.table(paste("~/reanalysis/table/countfiltered_",taxa,"_",code,".tsv",sep=""))
rownames(final.table) <- gsub(" ","_",rownames(final.table))
rownames(final.table) <- gsub("[","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("]","",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub("(","-",rownames(final.table),fixed = TRUE)
rownames(final.table) <- gsub(")","-",rownames(final.table),fixed = TRUE)
tree_filtered <- match_data(final.table,capwild.tree,output="tree")
hierarchy <- hierarchy_all[which(hierarchy_all[,1] %in% colnames(final.table)),]
samples.kept <- colnames(final.table)
metadata.filtered <- metadata[rownames(metadata) %in% samples.kept,]
metadata.filtered1 <- tibble::rownames_to_column(metadata.filtered, "Code")
row.names(metadata.filtered1) <- metadata.filtered1$Datafiles
pairdis.q1 <- pair_dis(final.table,qvalue=1,hierarchy=hierarchy[,c(1,5)], tree=tree_filtered)
u1n <- pairdis.q1$L1_UqN
u1n.dist <- as.dist(u1n)
ps.disper.u1n.origin <- betadisper(u1n.dist, metadata.filtered1$Origin)
permutestq1tree <- permutest(ps.disper.u1n.origin, pairwise = TRUE)
permutesq1_tree_results <- append(permutesq1_tree_results,permutestq1tree[1])
permanovaq1tree <- adonis(u1n.dist ~ Origin, data =metadata.filtered1, permutations = 999)
permanovaq1_tree_results <- append(permanovaq1_tree_results,permanovaq1tree[1])
permanovaq1_tree_results
pairdisq1_all_tree1 <- readRDS("~/reanalysis/Results/Diversity/Genus/pairdisq1_all_tree1.RData")
pairdisq1_all_tree1 <- readRDS("~/reanalysis/Results/Diversity/pairdisq1_all_tree1.RData")
pairdisq1_all_tree1
permaREH <- readRDS("~/reanalysis/Results/Diversity/permanova_q1_tree_Genus.RData")
permaREH <- readRDS("~/reanalysis/Results/Diversity/Genus/permanova_q1_tree_Genus.RData")
permaREH
R.Version()
setwd("~/reanalysis)
q
c
setwd("~/reanalysis")
metadata <- read.table("metadata.tsv", sep =";")
View(metadata)
metadata <- read.table("metadata.tsv", sep ="\t")
metadata <- read.table("metadata.tsv", sep ="\t", header = TRUE)
write.table(metadata, "metadata.tsv", sep =";")
write.table(metadata, "metadata.tsv", sep =";", quote = FALSE)
setwd("~/github/Wild_Captive_16S")
metadata <- read.table("Data/metadata.tsv", sep =";")
View(metadata)
metadata <- read.table("Data/metadata.tsv", sep =";")
View(metadata)
list.files()
metadata <- read.table("Data/metadata.tsv")
metadata <- read.table("Data/metadata.tsv", sep =";")
setwd("~/reanalysis")
metadata <- read.table("metadata.tsv", sep =";")
View(metadata)
setwd("~/github/Wild_Captive_16S")
metadata <- read.table("Data/metadata.tsv", sep =";")
metadata <- read.table("Data/metadata.tsv", sep =";")
View(metadata)
